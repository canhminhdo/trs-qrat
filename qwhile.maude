load ket-as4qc/qc.maude

fmod SYNTAX is
    pr QID .
    pr NAT .

    sorts Var Reg Com Prog Gate Meas .
    subsort Com < Prog .
    subsort Var < Reg .
    
    ops I X Y Z H S T  : -> Gate . --- symbols representing one-qubit gates
    ops CX CY CZ SWAP  : -> Gate . --- symbols representing two-qubit gates
    ops CCX CCZ CSWAP  : -> Gate . --- symbols representing three-qubit gates

    --- variables
    op v : Qid -> Var [ctor] .
    --- registers
    op nil : -> Reg [ctor] .
    op _,_ : Reg Reg -> Reg [ctor assoc] .
    --- measurement
    op M[_] : Var -> Meas .

    --- for empty program
    op emp : -> Prog [ctor] .
    --- for skip
    op skip : -> Com [ctor] .
    --- for unitary transformation
    op _:=_[_] : Reg Gate Reg -> Com [ctor] .
    --- for sequential composition
    op _;_ : Prog Prog ->  Prog [ctor assoc prec 42 id: emp] .
    --- for if_then_else_fi
    op if_=_then_else_fi : Meas Nat Prog Prog -> Com [ctor] .
    --- for while ... od
    op while_=_do_od : Meas Nat Prog -> Com [ctor] .
endfm

fmod ENV is
    pr SYNTAX .
    
    sort Entry Env .
    subsort Entry < Env .

    op _->_ : Var Nat -> Entry .
    op empEnv : -> Env [ctor] .
    op __ : Env Env -> Env [ctor comm assoc  id: empEnv] .
    op _[_] : Env Var -> Nat .

    var V : Var . 
    var N : Nat . 
    var E : Env .

    eq ((V -> N) E)[V] = N .
    eq (V -> N) (V -> N) = (V -> N) .
endfm

fmod QC-EXT is
    pr ENV .
    pr QC .
    
    vars V V1 V2 V3 : Var .
    vars N N1 N2 N3 : Nat .
    vars US : GateSet .
    vars E : Env .
    vars U : Gate .

    sort GateSet .
    subsort Gate < GateSet .

    --- build projectors for measurement
    op buildMeasOp : Nat Var Env -> Mat .
    eq buildMeasOp(0, V, E) = P0(E[V]) .
    eq buildMeasOp(1, V, E) = P1(E[V]) .

    --- build quantum gates
    op buildGate : Gate Reg Env -> Mat .
    ceq buildGate(U, V, E) = toGate(U, E[V]) if U in (I X Y Z H S T) .
    ceq buildGate(U, (V1, V2), E) = toGate(U, E[V1], E[V2]) if U in (CX CY CZ SWAP) .
    ceq buildGate(U, (V1, V2, V3), E) = toGate(U, E[V1], E[V2], E[V3]) if U in (CCX CCZ CSWAP) .

    --- convert unitary operator symbols to acctual quatum gates
    op toGate : Gate Nat -> Mat .
    op toGate : Gate Nat Nat -> Mat .
    op toGate : Gate Nat Nat Nat -> Mat .
    --- one-qubit gates
    eq toGate(I, N) = I(N) .
    eq toGate(X, N) = X(N) .
    eq toGate(Y, N) = Y(N) .
    eq toGate(Z, N) = Z(N) .
    eq toGate(H, N) = H(N) .
    eq toGate(S, N) = S(N) .
    eq toGate(T, N) = T(N) .
    --- two-qubit gates
    eq toGate(CX, N1, N2) = CX(N1, N2) .
    eq toGate(CY, N1, N2) = CY(N1, N2) .
    eq toGate(CZ, N1, N2) = CZ(N1, N2) .
    eq toGate(SWAP, N1, N2) = SWAP(N1, N2) .
    --- three-qubit gates
    eq toGate(CCX, N1, N2, N3) = CCX(N1, N2, N3) .
    eq toGate(CCZ, N1, N2, N3) = CCZ(N1, N2, N3) .
    eq toGate(CSWAP, N1, N2, N3) = CSWAP(N1, N2, N3) .

    --- a set of unitary operator symbols
    op empOp : -> GateSet [ctor] .
    op __ : GateSet GateSet -> GateSet [ctor comm assoc id: empOp] .
    op _in_ : Gate GateSet -> Bool .
    eq U in (U US) = true .
    eq U in US = false [owise] .
endfm

mod SEMANTICS is
    pr QC-EXT .

    sort Config .
    op <_,_,_> : Prog Vect Env -> Config .

    vars S S' S1 S1' S2 : Prog .
    vars V V' : Vect .
    vars Q : Var .
    vars R : Reg .
    vars U : Gate .
    vars E : Env .
    
    --- rewrite rules for transition rules
    rl  [SK]  : < skip ; S, V, E > => < S, V, E > .
    rl  [UT]  : < R := U[R] ; S, V, E > => < S, buildGate(U, R, E) x V, E > .
    --- crl [SC]  : < S1 ; S2, V, E > => < S1' ; S2, V', E > if < S1, V, E > => < S1', V', E > /\ S1 =/= S1' .
    crl [IF0] : < if M[Q] = 1 then S1 else S2 fi ; S, V, E > => < S2 ; S, V', E > if V' := buildMeasOp(0, Q, E) x V /\ V' =/= O .
    crl [IF1] : < if M[Q] = 1 then S1 else S2 fi ; S, V, E > => < S1 ; S, V', E > if V' := buildMeasOp(1, Q, E) x V /\ V' =/= O .
    crl [L0]  : < while M[Q] = 1 do S od ; S', V, E > => < S', V', E > if V' := buildMeasOp(0, Q, E) x V /\ V' =/= O .
    crl [L1]  : < while M[Q] = 1 do S od ; S', V, E > => < S ; (while M[Q] = 1 do S od) ; S', V', E > if V' := buildMeasOp(1, Q, E) x V /\ V' =/= O .
endm